{"version":3,"sources":["containers/Dashboard/ContractManager/propTypes.js","containers/Dashboard/ContractManager/ProfileContainer/index.js","containers/Dashboard/ContractManager/ProfileContainer/ProfileContainer.js","containers/Dashboard/ContractManager/ProfileContainer/logic.js","containers/Dashboard/ContractManager/ActionContainer/propTypes.js","containers/Dashboard/ContractManager/ActionContainer/ActionContainer.js","containers/Dashboard/ContractManager/ActionContainer/index.js","containers/Dashboard/ContractManager/ActionContainer/styles.js","containers/Dashboard/ContractManager/ContractManager.js","containers/Dashboard/ContractManager/index.js","containers/Dashboard/ContractManager/styles.js"],"names":["PropTypes","object","isRequired","ProfileContainer","useWeb3React","library","deactivate","language","useSelector","state","settings","stakingContract","staking","contract","feeContract","fee","totalStake","stakeList","yourStake","feeStats","isShowDollar","walletAddress","dispatch","useDispatch","getTotalStake","useCallback","stakingGetTotalStake","getStakeList","stakingGetStakeList","getYourStake","stakingGetYourStake","value","getFeeStats","feeGetFeeStats","logout","_walletID","settingsLogout","setIsShowPrice","_isShowPrice","settingsShowDollar","useState","tokenAgeList","setTokenAgeList","yourShare","setYourShare","yourTokenAge","setYourTokenAge","messages","languageProvider","useEffect","onGetTotalStake","isLoaded","isLoading","oneTimeFetchTotalStake","onGetStakeList","oneTimeFetchAllStake","onSetTokenAgeList","tokenAgeMap","Map","stake","balance","day","Moment","diff","unix","claimedAt","set","get","Math","round","updatedTokenAgeList","i","max","Array","from","keys","length","push","oneTimeComputeTokenAgeDistribution","onGetYourStake","fetchYourStake","onSetYourShare","onSetYourTokenAge","totalPoint","today","updatedYourTokenAge","yourPoint","forEach","_stake","safeAmount","div","multipliedBy","toFixed","computeYourShareAndYourTokenAge","onGetFeeStats","oneTimeFetchTotalReward","feesTotal","remainingReward","stakeTotal","pendingReward","share","tokenAge","onEditAddress","onLogout","isChartLoading","loopringPrice","price","onSetIsShowDollar","ActionContainer","walletID","tokenContract","token","allowance","approve","claim","withdraw","getAllowance","tokenGetAllowance","getBalance","tokenGetBalance","doApprove","amount","tokenDoApprove","doStake","stakingDoStake","doClaim","stakingDoClaim","doWithdraw","stakingDoWithdraw","onApprove","onStake","isLocked","onClaim","onWithdraw","withdrawTime","withdrawalWaitTime","claimTime","rewardWaitTime","withStyles","ContractManager","Card","className","href","target","rel","style","color","Grid","container","spacing","item","xs","lg","exact","to"],"mappings":"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","file":"static/js/13.48885275.chunk.js","sourcesContent":["import { PropTypes } from 'prop-types';\n\nconst propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default propTypes;\n","import ProfileContainer from './ProfileContainer';\n\nexport default ProfileContainer;\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useWeb3React } from '@web3-react/core';\n\nimport extProps from './propTypes';\nimport languageProvider from '../../../../translations';\nimport { Profile } from '../../../../components';\nimport { settingsLogout, settingsShowDollar } from '../../../../redux/features/settings/action';\nimport {\n  computeYourShareAndYourTokenAge,\n  fetchYourStake,\n  oneTimeComputeTokenAgeDistribution,\n  oneTimeFetchAllStake, oneTimeFetchTotalReward,\n  oneTimeFetchTotalStake,\n} from './logic';\nimport {\n  stakingGetStakeList,\n  stakingGetTotalStake,\n  stakingGetYourStake,\n} from '../../../../redux/features/staking/action';\nimport { feeGetFeeStats } from '../../../../redux/features/fee/action';\n\n/*\n *\n * Display all the information about user stack\n *\n */\n\nconst ProfileContainer = () => {\n  const { library, deactivate } = useWeb3React();\n  const language = useSelector((state) => state.settings.language);\n  const stakingContract = useSelector((state) => state.staking.contract);\n  const feeContract = useSelector((state) => state.fee.contract);\n  const totalStake = useSelector((state) => state.staking.totalStake);\n  const stakeList = useSelector((state) => state.staking.stakeList);\n  const yourStake = useSelector((state) => state.staking.yourStake);\n  const feeStats = useSelector((state) => state.fee.feeStats);\n  const isShowDollar = useSelector((state) => state.settings.isShowDollar);\n  const walletAddress = useSelector((state) => state.settings.walletAddress);\n  const dispatch = useDispatch();\n  const getTotalStake = useCallback(() => dispatch(\n    stakingGetTotalStake(stakingContract),\n  ), [dispatch, stakingContract]);\n  const getStakeList = useCallback(() => dispatch(\n    stakingGetStakeList(stakingContract, library),\n  ),\n  [dispatch, stakingContract, library]);\n  const getYourStake = useCallback(() => dispatch(\n    stakingGetYourStake(stakingContract, walletAddress.value),\n  ),\n  [dispatch, stakingContract, walletAddress]);\n  const getFeeStats = useCallback(() => dispatch(\n    feeGetFeeStats(feeContract),\n  ), [dispatch, feeContract]);\n  const logout = useCallback((_walletID) => dispatch(\n    settingsLogout(deactivate, _walletID),\n  ), [dispatch, deactivate]);\n  const setIsShowPrice = useCallback((_isShowPrice) => dispatch(\n    settingsShowDollar(_isShowPrice),\n  ), [dispatch]);\n  const [tokenAgeList, setTokenAgeList] = useState(null);\n  const [yourShare, setYourShare] = useState(null);\n  const [yourTokenAge, setYourTokenAge] = useState(null);\n\n  const messages = languageProvider[language];\n\n  useEffect(() => {\n    oneTimeFetchTotalStake(stakingContract, totalStake, getTotalStake);\n  }, [stakingContract, totalStake, getTotalStake]);\n\n  useEffect(() => {\n    oneTimeFetchAllStake(stakingContract, library, stakeList, getStakeList);\n  }, [stakingContract, library, stakeList, getStakeList]);\n\n  useEffect(() => {\n    oneTimeComputeTokenAgeDistribution(stakeList, tokenAgeList, setTokenAgeList);\n  }, [stakeList, tokenAgeList, setTokenAgeList]);\n\n  useEffect(() => {\n    fetchYourStake(stakingContract, yourStake, walletAddress, getYourStake);\n  }, [stakingContract, yourStake, walletAddress, getYourStake]);\n\n  useEffect(() => {\n    computeYourShareAndYourTokenAge(stakeList, yourStake, yourShare,\n      yourTokenAge, setYourShare, setYourTokenAge);\n  }, [stakeList, yourStake, yourShare, yourTokenAge, setYourShare, setYourTokenAge]);\n\n  useEffect(() => {\n    oneTimeFetchTotalReward(feeContract, feeStats, getFeeStats);\n  }, [feeContract, feeStats, getFeeStats]);\n\n  return (\n    <Profile\n      messages={messages}\n      feesTotal={(feeStats.value.remainingReward || 0) / (10 ** 18)}\n      stakeTotal={totalStake.value.balance / (10 ** 18)}\n      stake={(yourStake.value.balance || 0) / (10 ** 18)}\n      pendingReward={(yourStake.value.pendingReward) / (10 ** 18)}\n      share={yourShare * 1 || 0}\n      tokenAge={yourTokenAge || 0}\n      walletAddress={walletAddress.value}\n      tokenAgeList={tokenAgeList || []}\n      onEditAddress={() => logout(1)}\n      onLogout={() => logout(0)}\n      isLoading={!feeStats.isLoaded || !totalStake.isLoaded || !yourStake.isLoaded}\n      isChartLoading={!stakeList.isLoaded}\n      isShowDollar={isShowDollar.value}\n      loopringPrice={isShowDollar.price}\n      onSetIsShowDollar={setIsShowPrice}\n    />\n  );\n};\n\nProfileContainer.propTypes = extProps;\n\nexport default ProfileContainer;\n","import Moment from 'moment';\nimport { safeAmount } from '../../../../utils/BigAmountHelper';\n\n// Fetch the total amount stake in staking pool only if not already done\nexport const oneTimeFetchTotalStake = (stakingContract, totalStake, onGetTotalStake) => {\n  if (!!stakingContract && !totalStake.isLoaded && !totalStake.isLoading) onGetTotalStake();\n};\n\n// Fetch all user stake in staking pool only if not already done\n// will be used to compute chart of token age distribution and your share of reward\nexport const oneTimeFetchAllStake = (stakingContract, library, stakeList, onGetStakeList) => {\n  if (!!stakingContract && !!library\n    && !stakeList.isLoaded && !stakeList.isLoading) onGetStakeList();\n};\n\n// Compute token age distribution\nexport const oneTimeComputeTokenAgeDistribution = (stakeList, tokenAgeList, onSetTokenAgeList) => {\n  if (!stakeList.isLoaded || !!tokenAgeList) return;\n  const tokenAgeMap = new Map();\n\n  // eslint-disable-next-line no-restricted-syntax\n  for (const stake of stakeList.value) {\n    // eslint-disable-next-line no-continue\n    if (stake.balance === '0') continue;\n    const today = Moment();\n    const day = today.diff(Moment.unix(stake.claimedAt), 'day');\n    tokenAgeMap.set(day, (tokenAgeMap.get(day) || 0) + Math.round(stake.balance / (10 ** 18)));\n  }\n\n  const updatedTokenAgeList = [];\n  const oldestDay = Math.max(...Array.from(tokenAgeMap.keys()));\n  for (let i = oldestDay; i >= 0; i -= 1) {\n    if (!updatedTokenAgeList.length) {\n      updatedTokenAgeList.push((tokenAgeMap.get(i) || 0));\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n    updatedTokenAgeList.push((tokenAgeMap.get(i) || 0)\n      + updatedTokenAgeList[updatedTokenAgeList.length - 1]);\n  }\n  onSetTokenAgeList(updatedTokenAgeList);\n};\n\n// Fetch your own stake every time you sign in\nexport const fetchYourStake = (stakingContract, yourStake, walletAddress, onGetYourStake) => {\n  if (!!stakingContract && !yourStake.isLoaded\n    && !yourStake.isLoading && !!walletAddress.value) onGetYourStake();\n};\n\n// Compute your share of reward and your token age based on your stake and the stake of everyone\nexport const computeYourShareAndYourTokenAge = (stakeList, yourStake, yourShare, yourTokenAge,\n  onSetYourShare, onSetYourTokenAge) => {\n  if (!stakeList.isLoaded || !yourStake.isLoaded) return;\n\n  let totalPoint = 0;\n  const today = Moment();\n  const updatedYourTokenAge = today.diff(Moment.unix(yourStake.value.claimedAt), 'hour') / 24;\n  const yourPoint = (yourStake.value.balance / (10 ** 18)) * updatedYourTokenAge;\n  if (yourPoint > 0) {\n    stakeList.value.forEach((_stake) => {\n      totalPoint += (_stake.balance / (10 ** 18)) * (today.diff(Moment.unix(_stake.claimedAt), 'hour') / 24);\n    });\n  }\n  const updatedYourShare = !yourPoint ? 0 : safeAmount(yourPoint)\n    .div(totalPoint).multipliedBy(100).toFixed(4);\n  onSetYourShare(updatedYourShare || 0);\n  onSetYourTokenAge(!yourPoint ? 0 : updatedYourTokenAge);\n};\n\n// Fetch the total reward in fees pool only if not already done\nexport const oneTimeFetchTotalReward = (feeContract, feeStats, onGetFeeStats) => {\n  if (!!feeContract && !feeStats.isLoaded && !feeStats.isLoading) onGetFeeStats();\n};\n","import { PropTypes } from 'prop-types';\n\nconst propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default propTypes;\n","import React, { useCallback, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport extProps from './propTypes';\nimport languageProvider from '../../../../translations';\nimport { Action } from '../../../../components';\nimport { tokenDoApprove, tokenGetAllowance, tokenGetBalance } from '../../../../redux/features/token/action';\nimport { stakingDoStake, stakingDoClaim, stakingDoWithdraw } from '../../../../redux/features/staking/action';\n\n/*\n *\n * Display all action to interact with staking pool\n * Stake(deposit), claim, withdraw\n *\n */\n\nconst ActionContainer = () => {\n  const language = useSelector((state) => state.settings.language);\n  const walletID = useSelector((state) => state.settings.walletID);\n  const stakingContract = useSelector((state) => state.staking.contract);\n  const tokenContract = useSelector((state) => state.token.contract);\n  const walletAddress = useSelector((state) => state.settings.walletAddress);\n  const yourStake = useSelector((state) => state.staking.yourStake);\n  const allowance = useSelector((state) => state.token.allowance);\n  const balance = useSelector((state) => state.token.balance);\n  const approve = useSelector((state) => state.token.approve);\n  const stake = useSelector((state) => state.staking.stake);\n  const claim = useSelector((state) => state.staking.claim);\n  const withdraw = useSelector((state) => state.staking.withdraw);\n  const dispatch = useDispatch();\n  const getAllowance = useCallback(() => dispatch(\n    tokenGetAllowance(tokenContract, walletAddress.value),\n  ), [dispatch, walletAddress, tokenContract]);\n  const getBalance = useCallback(() => dispatch(\n    tokenGetBalance(tokenContract, walletAddress.value),\n  ), [dispatch, walletAddress, tokenContract]);\n  const doApprove = useCallback((amount) => dispatch(\n    tokenDoApprove(tokenContract, walletAddress.value, amount),\n  ),\n  [dispatch, walletAddress, tokenContract]);\n  const doStake = useCallback((amount) => dispatch(\n    stakingDoStake(stakingContract, walletAddress.value, amount),\n  ),\n  [dispatch, walletAddress, stakingContract]);\n  const doClaim = useCallback(() => dispatch(\n    stakingDoClaim(stakingContract, walletAddress.value),\n  ),\n  [dispatch, walletAddress, stakingContract]);\n  const doWithdraw = useCallback((amount) => dispatch(\n    stakingDoWithdraw(stakingContract, walletAddress.value, amount),\n  ),\n  [dispatch, walletAddress, stakingContract]);\n\n  // Fetch the allowance(how much can be transferred to staking pool) only one time\n  useEffect(() => {\n    if (!!tokenContract && walletAddress.value\n      && !allowance.isLoading && !allowance.isLoaded) getAllowance();\n  }, [tokenContract, walletAddress, allowance, getAllowance]);\n\n  // Fetch the amount of LRC in wallet only one time\n  useEffect(() => {\n    if (!!tokenContract && walletAddress.value\n      && !balance.isLoading && !balance.isLoaded) getBalance();\n  }, [tokenContract, walletAddress, balance, getBalance]);\n\n  const messages = languageProvider[language];\n\n  return (\n    <Action\n      messages={messages}\n      allowance={allowance}\n      balance={balance}\n      onApprove={doApprove}\n      approve={approve}\n      stake={stake}\n      onStake={doStake}\n      isLocked={walletID === 1}\n      claim={claim}\n      withdraw={withdraw}\n      onClaim={doClaim}\n      onWithdraw={doWithdraw}\n      pendingReward={(yourStake.value.pendingReward || '0')}\n      yourStake={(yourStake.value.balance || '0')}\n      withdrawTime={(yourStake.value.withdrawalWaitTime || 90 * 24 * 60 * 60) * 1}\n      claimTime={(yourStake.value.rewardWaitTime || 90 * 24 * 60 * 60) * 1}\n    />\n  );\n};\n\nActionContainer.propTypes = extProps;\n\nexport default ActionContainer;\n","import { withStyles } from '@material-ui/core/styles';\nimport styles from './styles';\nimport ActionContainer from './ActionContainer';\n\nexport default withStyles(styles)(ActionContainer);\n","export default () => ({\n\n});\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { useWeb3React } from '@web3-react/core';\nimport { Card, Grid } from '@material-ui/core';\nimport { Redirect } from 'react-router-dom';\n\nimport languageProvider from '../../../translations';\nimport extProps from './propTypes';\nimport { SuspenseLoading } from '../../../components';\nimport ProfileContainer from './ProfileContainer';\nimport Action from './ActionContainer';\n\n/*\n *\n * Display profile containing all basic information about stake user\n * and action available with the staking pool\n * Check if wallet is active and if all contract are loaded\n * NolanVanmoortel\n */\n\nconst ContractManager = () => {\n  const language = useSelector((state) => state.settings.language);\n  const stakingContract = useSelector((state) => state.staking.contract);\n  const feeContract = useSelector((state) => state.fee.contract);\n  const tokenContract = useSelector((state) => state.token.contract);\n  const walletAddress = useSelector((state) => state.settings.walletAddress);\n  const { library } = useWeb3React();\n\n  const messages = languageProvider[language];\n\n  if (!walletAddress.value || !library) return (<Redirect exact from=\"/\" to=\"/login\" />);\n\n  if (!stakingContract || !feeContract\n    || !tokenContract) return (<SuspenseLoading messages={messages} />);\n\n  return (\n    <div>\n    <Card className=\"card-box mb-4\">\n      <span className=\"ribbon-angle ribbon-angle--top-left ribbon-primary\">\n        <small><a href=\"https://loopring.org\" target=\"_blank\" rel=\"noopener noreferrer\" style={{ color: 'white' }}>Loopring</a></small>\n      </span>\n      <Grid container spacing={4}>\n        <Grid item xs={12} lg={5}>\n          <div className=\"p-4 text-center\">\n            <ProfileContainer />\n          </div>\n        </Grid>\n        <Grid item xs={12} lg={7}>\n          <div className=\"hero-wrapper bg-composed-wrapper h-100 rounded-right bg-secondary\">\n            <div className=\"flex-grow-1 w-100 d-flex align-items-center justify-content-center px-4\">\n              <Action />\n            </div>\n          </div>\n        </Grid>\n      </Grid>\n    </Card>\n<div\nclassName=\"text-center\"\n> {messages['developpedBy']}<a href=\"mailto:exchange@loopring.io\">Contact us</a> </div>\n    </div>\n  );\n};\n\nContractManager.propTypes = extProps;\n\nexport default ContractManager;\n","import { withStyles } from '@material-ui/core/styles';\nimport styles from './styles';\nimport ContractManager from './ContractManager';\n\nexport default withStyles(styles)(ContractManager);\n","export default () => ({\n\n});\n"],"sourceRoot":""}